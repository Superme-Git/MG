$#include "nuisprite.h"

namespace Nuclear
{
	enum SPRITE_COMPONENT
	{
		XPSC_ALL = -1, 
		XPSC_MAXCOUNT = 7,
	};
	enum XPUSA_TYPE
	{
		XPUSAT_MOVESTATE,
		XPUSAT_MOVEINFLEXION,
		XPUSAT_PLAYACTIONFINISH,
		XPUSAT_DEFAULTACTIONFINISH,
		XPUSAT_TELEPORTEND
	};
	
	enum XPSPREFF_FLAG
	{
		XPSPREFFFLAG_BIND_EFF_POS = 1 << 0,
		XPSPREFFFLAG_BIND_AUTO = 1 << 1,
		XPSPREFFFLAG_BIND_WEAPON = 1 << 2,
		XPSPREFFFLAG_BIND_WEAPON_0 = 1 << 3,
		XPSPREFFFLAG_BIND_WEAPON_1 = 1 << 4,
		XPSPREFFFLAG_LINKING_FRAME = 1 << 5,
		XPSPREFFFLAG_SELF_REF = 1 << 6,
		XPSPREFFFLAG_ASYNC = 1 << 7,
		XPSPREFFFLAG_NO_FOLLOW_SCALE = 1 << 8,
		XPSPREFFFLAG_NO_SOUND = 1 << 9,
		XPSPREFFFLAG_DRAW_ON_TOP = 1 << 10,
		XPSPREFFFLAG_DRAW_BEFORE_SPRITE = 1<<11,
	};

	enum XPSPRITE_ACTION_LOAD_TYPE
	{
		XPSALT_SYNC = 0,
		XPSALT_ASYNC,
		XPSALT_BASE_ASYNC,
	};

	class SpriteEventNotify
	{
	public:
		virtual void OnEvents(ISprite* pSprite, const std::vector<int>& eventIDs) = 0;
	};
	class SpriteNotify
	{
	public:
		virtual void OnPlayFrame(ISprite* pSprite, const std::wstring &actionName, int frame) = 0;
	};

	class ISprite : virtual public ISelectableObj
	{
	public:
		virtual ~ISprite();
		virtual void RegisterFrameNotify(SpriteNotify* pNotify, const std::wstring &actionName, int frame) = 0;
		virtual void DeregisterFrameNotify(SpriteNotify* pNotify, const std::wstring &actionName, int frame) = 0;
		virtual void EnableStepSound(bool b) = 0;
		virtual bool IsStepSoundEnable() const = 0;
		virtual void ClearAllNotify() = 0;
		virtual const std::wstring &GetSoundActorName() const = 0;
		virtual void DumpAllActionNames(std::vector<std::wstring> &actions) const = 0;

		virtual void SetScale(float scale) = 0;
		virtual float GetScale () const = 0;

		virtual void SetLocation(const NuclearLocation& location) = 0;
		virtual NuclearLocation GetLocation() const = 0;

		virtual void SetDirection( NuclearDirection direction ) = 0;
		virtual NuclearDirection GetDirection() const = 0;
		virtual NuclearFPoint GetVectorDirection() const = 0;

		void UseRenderTarget(bool b);
		bool IsUseRenderTarget() const; 
		virtual void SetVisible(bool v) = 0;
		virtual bool IsVisiable() const = 0;

		virtual void SetEntityVisible(bool v) = 0;
		virtual bool IsEntityVisible() const = 0;
		virtual void SetTitleVisible(bool v) = 0;
		virtual bool IsTitleVisible() const = 0;
		virtual void SetAlpha(unsigned char a) = 0; 
		virtual unsigned char GetAlpha() const = 0;
		bool IsCoveredAlpha() const; 
		void SetCoveredAlpha(bool b);

		virtual bool IsSolidMask() const = 0;
		virtual void SetSolidMask(bool b) = 0;

		virtual bool IsUpdateEveryFrame() const = 0;
		virtual void SetUpdateEveryFrame(bool b) = 0;

		virtual void SetTitle(EntitativeTitleHandle handle, NuclearTitleAlign align = XPTA_DEFAULT) = 0;
		virtual Nuclear::EntitativeTitleHandle GetTitle() = 0;
		virtual Nuclear::EntitativeTitleHandle UnsetTitle() = 0;
		virtual void SetTitleSize(int width, int height) = 0;
		virtual int GetTitleWidth() const = 0;
		virtual int GetTitleHeight() const = 0;

		virtual void SetTitleBindSocket(const std::wstring &socket) = 0;
		virtual std::wstring GetTitleBindSocket() const = 0;

		virtual int GetBubbleItemOffset() const = 0;

		virtual const NuclearPoint& GetEffectPos() const = 0;

		virtual bool SetModel(const std::wstring &modelname, bool async) = 0;
		bool SetModel(const std::wstring &modelname); 
		virtual const std::wstring& GetModelName() const = 0;

		virtual bool SetComponent(int scid, const std::wstring& resource, NuclearColor color, std::wstring wsLayerName = L"") = 0;
		virtual bool GetComponent(int scid, std::wstring& resource) = 0;
		virtual bool GetComponentColor(int scid, NuclearColor &color) = 0;
		virtual void SetRideName(const std::wstring& name) = 0;
		virtual void SetMinMaxEffectAlpha(float minalpha, float maxalpha) = 0;
		virtual float GetMinEffectAlpha() const = 0;
		virtual float GetMaxEffectAlpha() const = 0;

		virtual NuclearPrefetchResult PrefetchAction(const std::wstring &action_name) = 0;
		virtual void HoldAction(const std::wstring &action_name) = 0;
		virtual void ReleaseAction(const std::wstring &action_name) = 0;
		virtual void SetHoldLastFrame(bool bHoldLastFrame) = 0;
		virtual bool SetDefaultAction( const std::wstring& action_name, XPSPRITE_ACTION_LOAD_TYPE type, float fScaleForTotalTime, bool bHoldLastFrame) = 0;
		virtual const std::wstring &GetDefaultAction() const = 0;
		virtual bool PlayAction(const std::wstring& action_name, XPSPRITE_ACTION_LOAD_TYPE type, float fScaleForTotalTime) = 0;
		virtual const std::wstring &GetCurActionName() const = 0;
		virtual bool GetActionTimeByName(const std::wstring& action_name, float &time) = 0;

		virtual int GetCurrentFrame() const = 0;
		virtual int GetTotalFrame() const = 0;

		virtual bool SetBindFile(int id, const std::wstring &bindFile) = 0;
		virtual std::wstring GetBindFile(int id) = 0;

		virtual IEffect* SetDurativeEffect(const std::wstring &effect_name, const NuclearPoint& relpos, unsigned int flag) = 0;
		virtual IEffect* SetContinueEffect(const std::wstring &headEffect, const std::wstring &midEffect, const std::wstring &endEffect, int continueTime, const NuclearPoint& relpos, unsigned int flag) = 0;
		virtual void RemoveDurativeEffect(IEffect* pEffect) = 0;
		virtual bool ChangeEffectOffset(IEffect* pEffect, const NuclearPoint &relpos) = 0;
		virtual IEffect* PlayEffect(const std::wstring &effect_name, int dx, int dy, int times, unsigned int flag, unsigned char soundtype, int TimeMode = 0, int iRot = 0) = 0;
		virtual IEffect* PlayEffect(const std::wstring &effect_name, const NuclearPoint& relpos, int times, const std::wstring &hostname, bool async) = 0;

		virtual void EnableShadow(bool b) = 0;
		virtual bool IsEnableShadow() = 0;
		virtual void TeleportWithBlur(const NuclearLocation &point, int telTime, int blurTime) = 0;

		virtual void SetTurnDir(int iDir) = 0;
		virtual int  GetTurnDir() const = 0;
		virtual void SetHighlight(bool b) = 0;
		virtual bool IsHighlight() const = 0;
		virtual void SetMouseTestMode(Nuclear_Mouse_TestMode m) = 0;
		virtual Nuclear_Mouse_TestMode GetMouseTestMode() const = 0;

		virtual void SetActionSoundPriority(short priority) = 0;
		virtual short GetActionSoundPriority() const = 0;
		virtual void  SetMoveSpeed(float speed) = 0;
		virtual float GetMoveSpeed() const = 0;
		virtual void StopMove() = 0;
		virtual bool IsMoving() const = 0;
		virtual void SetMoveSuspended(bool moveSuspended) = 0;
		virtual bool IsMoveSuspended() const = 0;

		virtual void MoveTo(int targetX, int targetY, int range, const Nuclear::CSIZE * size, bool straight = false) = 0;
		void MoveTo(const NuclearLocation & target, int range, const CSIZE * size, bool straight = false);

		virtual void  StartShake() = 0;	// 开始抖动 
		virtual void  StopShake() = 0;	// 结束抖动
		virtual void SetCurveMove(bool b) = 0;//移动中是否需要走弧形

		virtual void KeepMoveTrail(bool keep) = 0;
		virtual bool IsKeepMoveTrail() const = 0;
		virtual void SetMoveMask(unsigned int mask) = 0;
		virtual NuclearLocation GetLogicLocation() const = 0;
		virtual void SetDirection(int targetx, int targety) = 0;
		void SetDirection(const Nuclear::NuclearPoint & target);

		virtual bool InAttackRange( const Nuclear::NuclearLocation & target, int range, unsigned int mask) = 0;
		virtual void SetComponentAniReleaseFlag(Nuclear::NuclearPaniReleaseFlag flag) = 0;

		virtual int GetLayerCount() = 0;
		virtual int GetLayerIndexByName(std::wstring wsName) = 0;
		virtual std::wstring GetLayerNameByIndex(int iIndex) = 0;
		virtual bool IsPartLayer(int iIndex) = 0;

		virtual void SetDyePartIndex(int part, int index) = 0;
		virtual bool GetDyeEnable() = 0;
		virtual int GetDyePartCount() = 0;
		virtual int GetDyeProjCount(int part) = 0;

	};

}
