namespace Nuclear
{	
	typedef int PictureHandle;

	struct DrawPictureParam
	{
		PictureHandle       handle;
		const NuclearFRectt*        pRect;
		const NuclearMatrix3*    pMatrix;
		const NuclearColor*      pColor;
		int                 colorCount;
		NuclearTextureBlendMode blend;
		const NuclearFRectt*        pSrcrect;
		bool                bSpecAlpha;
        
        bool                bUseBW;
        float               fGreyPercent;
        float               fRedPercent;

		DrawPictureParam(); 
	};

	struct DrawEllipsePictureParam
	{
		PictureHandle handle;
		float x;
		float y;
		float rx;
		float ry;
		float u0;
		float v0;
		float ru;
		float rv;
		NuclearColor color;
		NuclearTextureAddRess TextureMode;
		NuclearColor borderColor;
		DrawEllipsePictureParam(); 
	};

	struct DrawBatchPictureParam
	{
		PictureHandle handle;
		PictureHandle secHandle;
		const NuclearFRectt *pRect;
		int rectCount;
		const NuclearMatrix3 *pMatrix;
		const NuclearColor *pColor;
		int colorCount;		
		NuclearTextureBlendMode blend;
		const NuclearFRectt *pSrcrect;
		const NuclearFRectt *pSecSrcRect;
		bool bSameuv; 
		bool bSecSameuv;
		bool bSpecAlpha;
		DrawBatchPictureParam();
		DrawBatchPictureParam(const DrawPictureParam &dpp);
	};

	enum XPRENDERER_VERSION
	{
		XPRV_DEFAULT =	0,
		XPRV_DX9	 =	1,
        XPRV_COCOS2D =  2,
	};

	enum
	{
		XPCRF_VERTICALSYNC = 1 << 0,
	};

	enum XPCREATE_RENDERER_RESULT
	{
		XPCRR_NULL_POINTER = -8,
		XPCRR_GET_DIRECT3D = -7,
		XPCRR_CREATE_DEVICE = -6,
		XPCRR_INIT_STATE_MANAGER = -5,
		XPCRR_CREATE_DEPTHSTENCIL_SURFACE = -4,
		XPCRR_CREATE_SECOND_DEPTHSTENCIL_SURFACE = -3,
		XPCRR_SET_DEPTHSTENCIL_SURFACE = -2,
		XPCRR_SHADER_VERSION = -1,
		XPCRR_OK = 0,
	};

	enum XP_DEVICE_STATE
	{
		XPDS_NO_DEVICE,
		XPDS_INTERNAL_ERROR,
		XPDS_LOST_DEVICE,
		XPDS_RESET_ERROR,
		XPDS_OK,
	};

	enum XP_SC_DEPTHSTENCIL_TYPE
	{
		XPSDT_NONE = 0,
		XPSDT_USE_MAIN,
		XPSDT_INDEPENDENCE,
	};

	class Renderer 
	{
	public:
		const static float Z;
		virtual ~Renderer();
		bool DrawLine(float x1, float y1, float x2, float y2, NuclearColor color);
		bool DrawBox(float x1, float y1, float x2, float y2, NuclearColor color, NuclearFillMode fillmode = XPFM_SOLIDFILL, const NuclearMatrix3 *pMatrix = NULL);
		virtual bool DrawCircle(float x, float y, float r, NuclearColor color, NuclearFillMode fillmode = XPFM_SOLIDFILL);
		virtual PictureHandle LoadPictureFromNativePath(const std::string &nativepath);
		virtual bool DrawPicture(PictureHandle handle, const NuclearFRectt &rect, NuclearColor color);
		bool SaveTextureToFile(PictureHandle handle, const std::wstring &path);
        virtual bool OnResetDevice() = 0;
		virtual NuclearDisplayMode GetDisplayMode() const;
		virtual void Destroy() = 0;
		virtual void SetScissorRect(const NuclearRect* pRect) = 0;
		virtual bool DrawLine(const NuclearFRectt &line, NuclearColor color) = 0;
		virtual bool DrawLine(const NuclearFRectt *lines, int n, NuclearColor color) = 0;
		virtual bool DrawTriangle(float x1, float y1, float x2, float y2, float x3, float y3, NuclearColor color) = 0;
		virtual bool DrawBox(const NuclearFRectt &rect, NuclearColor color, NuclearFillMode fillmode = XPFM_SOLIDFILL, const NuclearMatrix3 *pMatrix = NULL) = 0;
		virtual bool DrawBox(const NuclearFRectt *rects, int n, NuclearColor color, NuclearFillMode fillmode = XPFM_SOLIDFILL, const NuclearMatrix3 *pMatrix = NULL) = 0;
		virtual bool DrawFan(float x, float y, float r, float fTheta, NuclearColor color, NuclearFillMode fillmode = XPFM_SOLIDFILL, const NuclearMatrix3 *pMatrix = NULL) = 0;
		virtual bool DrawEllipseFan(float x, float y, float rx, float ry, NuclearColor color, NuclearFillMode fillmode = XPFM_SOLIDFILL, float fStartAngle = 0.0f, float fEndAngle = 0.0f, const NuclearMatrix3 *pMatrix = NULL) = 0;
		virtual bool DrawEllipse(float x, float y, float rx, float ry, NuclearColor color, NuclearFillMode fillmode = XPFM_SOLIDFILL, float fAngle = 0.0f) = 0;
		virtual bool DrawTriangleList(const NuclearTCVertex* pVertexs, int nVertexNum) = 0;
		virtual bool DrawEllipsePicture(PictureHandle handle, float x, float y, float rx, float ry, float u0, float v0, NuclearColor color) = 0;
		virtual bool DrawEllipsePicture(const DrawEllipsePictureParam& param) = 0;
		virtual PictureHandle LoadPictureFromNativePath(const std::string &nativepath);
		virtual PictureHandle LoadPicture(const std::wstring &filename) = 0;
        virtual void CachePicture(PictureHandle pic, const std::wstring &filename) = 0;
        virtual bool CacheInMemory(); 
		virtual bool DrawPicture(const DrawPictureParam& param) = 0;
		virtual bool FreePicture(PictureHandle handle);
		virtual bool DrawBatchPicture(const DrawBatchPictureParam &param) = 0;
		virtual bool DrawPicture(PictureHandle handle, const NuclearFRectt &rect, NuclearColor color);
		virtual PictureHandle CreateRenderTarget(int iWidth, int iHeight, NuclearTextureFormat texfmt) = 0;
		virtual bool FreeRenderTarget(PictureHandle hRenderTarget) = 0;
		virtual bool PushRenderTarget(PictureHandle hRenderTarget) = 0;
		virtual bool PopRenderTarget() = 0;
		virtual bool SelectRenderEffect(XPRENDER_EFFECT xpre) = 0;
		virtual bool SetShaderParam(XPRENDER_EFFECT xpre, const void* pParam) = 0;
		virtual XPRENDER_EFFECT GetRenderEffect() = 0;
		virtual bool IsAutoTestDevice() = 0;
		virtual void SetAutoTestDevice(bool isAuto) = 0;
		virtual void SetRestoreTask(INuclearRunnable *pTask);
		virtual void SetLostTask(INuclearRunnable *pTask);
		virtual int GetAvailableTextureMem() = 0;
		virtual bool IsTextureCapsNoPow2() = 0;
		virtual IParticleManager* GetParticleManager() = 0;
		virtual IFontManager *GetFontManager() = 0;			
		bool SaveTextureToFile(PictureHandle handle, const std::wstring &path);
		virtual bool SaveTextureToFile(PictureHandle handle, NuclearImageFileFormat filefmt, const std::wstring &path) = 0;
		virtual bool SaveTextureToFile(PictureHandle handle, NuclearImageFileFormat filefmt, const std::wstring &path) = 0;
		virtual bool SaveTextureToFile(PictureHandle handle, NuclearTextureFormat texfmt, NuclearImageFileFormat filefmt, NuclearBuffer &outbuffer) = 0;
		virtual void DumpAllPicture(const std::wstring &path) = 0;
		virtual NuclearPictureInfo GetPictureSizeInfo(PictureHandle handle) = 0;
		virtual bool DrawPicture(PictureHandle picHandle, float left, float top, float right, float bottom) = 0; 

	};
	enum XPALPHABLEND_TYPE
	{
		XPBLEND_ZERO = 1,
		XPBLEND_ONE = 2,
		XPBLEND_SRCCOLOR = 3,
		XPBLEND_INVSRCCOLOR = 4,
		XPBLEND_SRCALPHA = 5,
		XPBLEND_INVSRCALPHA = 6,
		XPBLEND_DESTALPHA = 7,
		XPBLEND_INVDESTALPHA = 8,
		XPBLEND_DESTCOLOR = 9,
		XPBLEND_INVDESTCOLOR = 10,
		XPBLEND_SRCALPHASAT = 11,
		XPBLEND_BOTHSRCALPHA = 12,
		XPBLEND_BOTHINVSRCALPHA = 13,
		XPBLEND_BLENDFACTOR = 14,
		XPBLEND_INVBLENDFACTOR = 15,
	};

	enum XPTEXCOLORBLEND_TYPE
	{
		XPTOP_DEFAULT = 0,
		XPTOP_MODULATE = 0,
		XPTOP_SELECTARG1 = 1,
		XPTOP_SELECTARG2 = 2,
		XPTOP_ADD = 3,
		XPTOP_SUBTRACT = 4,
		XPTOP_ADDSMOOTH = 5,
		XPTOP_ADDSIGNED = 6,
		XPTOP_MODULATE2X = 7,
	};

	enum PSL_RENDSTATE
	{
		PSLRENDSTATE_ALPHA = 6,
		PSLRENDSTATE_LIGHTING = 2,
		PSLRENDSTATE_ADD  = 3,	
	};

	enum XPRENDER_EFFECT
	{
		XPRE_NULL = -1,
		XPRE_COLORBALANCE = 0,
		XPRE_COLORBALANCE_2,
		XPRE_ALPHA,		
		XPRE_2TEXTUREBLEND,
		XPRE_DISTORTION,	
		XPRE_COUNT
	};

	class IFontManager
	{
	public:
		virtual ~IFontManager();
		virtual void Release() = 0;
		virtual int GetFontTypeHeight( int fontType) = 0;
		virtual int GetFontTypeUnderlinePosition( int fontType) = 0;
		virtual int GetFontTypeUnderlineThickness( int fontType) = 0;
		virtual TextBlockHandle NewText( LPCTSTR text, int fonttype, DWORD color, DWORD gradualcolor, DWORD bkColor, bool bUnderline = false) = 0;
		virtual bool DrawText( TextBlockHandle htb, float x1, float y1, const NuclearFRectt* srcrect) = 0;
	};
	
	enum NuclearTextureFormat
	{
		XPTEXFMT_DEFAULT  = 0, 
		XPTEXFMT_A8R8G8B8 = 21,
		XPTEXFMT_A4R4G4B4 = 26,
		XPTEXFMT_R5G6B5 = 23,
		XPTEXFMT_DXT1 = 827611204,
		XPTEXFMT_DXT2 = 844388420,
		XPTEXFMT_DXT3 = 861165636,
		XPTEXFMT_DXT4 = 877942852,
		XPTEXFMT_DXT5 = 894720068,
	};
	
	enum NuclearPoolType {
		XPPOOL_VIDEOMEM = 0,	
		XPPOOL_MANAGED = 1,	
		XPPOOL_SYSTEMMEM = 2,
	};
	
	struct NuclearPictureInfo
	{
		int m_nPicWidth;
		int m_nPicHeight;
		NuclearTextureFormat m_texfmt;
		NuclearPoolType m_pooltype;
		std::wstring fileuri;
		NuclearPictureInfo();
	};

}
