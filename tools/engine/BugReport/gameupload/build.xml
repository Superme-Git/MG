<project name="gameupload" basedir="." default="generate.service">
  
  <property environment="env"/>
  <property name="lib.dir" value="WebContent/WEB-INF/lib"/>
  <property name="build.dir" value="WebContent/WEB-INF/classes"/>
	<property name="dist.dir"     value="${basedir}/dist"/>

  <path id="lib.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="compile.service">
    <delete dir="${build.dir}"/>
    <mkdir dir="${build.dir}"/>

    <!--First let's compile the classes-->
		<!-- encoding="UTF-8" -->
		<!-- TODO -Xlint:unchecked -->
    <javac fork="true"
           destdir="${build.dir}"
           srcdir="${basedir}/src"
           classpathref="lib.classpath" 
					 encoding="GBK"
					 debug="true" debuglevel="lines,vars,source" includeAntRuntime="false"  includeJavaRuntime="false">
    </javac>
  </target>

  <target name="generate.service" depends="compile.service">
    <!--wrap them up -->
    <copy toDir="${build.dir}" failonerror="true">
      <fileset dir="${basedir}/src">
        <include name="hibernate.cfg.xml"/>
        <include name="com/world2/dao/Exceptions.hbm.xml"/>
      </fileset>
    </copy>
		<mkdir dir="${dist.dir}"/>
    <jar destfile="${dist.dir}/gameupload.war">
      <fileset dir="WebContent">
				<exclude name="WEB-INF/lib/servlet-api.jar"/>
				<exclude name="WEB-INF/lib/mysql-connector-java-5.1.6-bin.jar"/>
      </fileset>
    </jar>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>

  <target name="compile" depends="generate.service">
  </target>

<!--========================================================================-->
<!-- 这些配置方式来源于 svrmgr 工程 刘东学 2011-5-20 11:45:19               -->
<!--========================================================================-->

<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "myapp".

  app.path             Context path to which this application should be
                       deployed (defaults to "/" plus the value of the
                       "app.name" property).

  app.version          Version number of this iteration of the application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  catalina.home        The directory in which you have installed
                       a binary distribution of Tomcat 4.  This will
                       be used by the "deploy" target.

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".

  manager.password     The login password of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

  manager.url          The URL of the "/manager" web application on the
                       Tomcat installation to which we will deploy web
                       applications and web services.

  manager.username     The login username of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

-->

  <property name="app.name"      value="gameupload"/>
  <property name="app.path"      value="/${app.name}"/>
  <property name="app.version"   value="1.0.0"/>
  
  <property name="build.home"    value="${basedir}"/>  
  <property name="catalina.home" value="E:/apache-tomcat"/> <!-- UPDATE THIS! -->
  <property name="dist.home"     value="${dist.dir}"/>
  
  <property name="manager.url"   value="http://localhost:8080/manager"/>
  <property name="manager.username"   value="tomcat"/>
  <property name="manager.password"   value="managertomcat"/>
  
  <property name="src.home"      value="${basedir}/src"/>
  <property name="web.home"      value="${basedir}/web"/>

<!--

  These properties define custom tasks for the Ant build tool that interact
  with the "/manager" web application installed with Tomcat 4.  Before they
  can be successfully utilized, you must perform the following steps:

  - Copy the file "server/lib/catalina-ant.jar" from your Tomcat 4
    installation into the "lib" directory of your Ant installation.

  - Create a "build.properties" file in your application's top-level
    source directory (or your user login home directory) that defines
    appropriate values for the "manager.password", "manager.url", and
    "manager.username" properties described above.

  For more information about the Manager web application, and the functionality
  of these tasks, see <http://localhost:8080/tomcat-docs/manager-howto.html>.

-->

<!-- 下面这些taskdef 依赖于 %TOMCAT_HOME%/lib/catalina-ant.lib，为了简单，
   我将此lib copy到%ANT_HOME%/lib目录下。否则编译不通过。
-->
  <taskdef name="deploy"  classname="org.apache.catalina.ant.DeployTask"/>
  <taskdef name="install"  classname="org.apache.catalina.ant.InstallTask"/>
  <taskdef name="list"    classname="org.apache.catalina.ant.ListTask"/>
  <taskdef name="reload"  classname="org.apache.catalina.ant.ReloadTask"/>
  <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask"/>
  <taskdef name="serverinfo"  classname="org.apache.catalina.ant.ServerinfoTask"/>
  <taskdef name="remove" classname="org.apache.catalina.ant.RemoveTask"/>

<!--

  The "deploy" target tells the specified Tomcat 4 installation to dynamically
  install this web application and make it available for execution.  It does
  *not* cause the existence of this web application to be remembered across
  Tomcat restarts; if you restart the server, you will need to re-install all
  this web application.

  If you have already installed this application, and simply want Tomcat to
  recognize that you have updated Java classes (or the web.xml file), use the
  "reload" target instead.

  NOTE:  This target will only succeed if it is run from the same server that
  Tomcat is running on.

  NOTE:  This is the logical opposite of the "remove" target.

-->

  <target name="deploy" depends="compile" description="Install application to servlet container">
    <deploy url="${manager.url}"
         username="${manager.username}"
         password="${manager.password}"
         path="${app.path}"
         war="${dist.home}/${app.name}.war"/>
  </target>

  <target name="deploy-only" description="Install application to servlet container">
    <deploy url="${manager.url}"
         username="${manager.username}"
         password="${manager.password}"
         path="${app.path}"
         war="${dist.home}/${app.name}.war"/>
  </target>


  <target name="serverinfo" description="Lists information about the Tomcat version, OS, and JVM properties">
    <serverinfo url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"/>

  </target>

<!-- ====================== List Target =================================== -->

<!--

  The "list" target asks the specified Tomcat 4 installation to list the
  currently running web applications, either loaded at startup time or
  installed dynamically.  It is useful to determine whether or not the
  application you are currently developing has been installed.

-->


  <target name="list" description="List installed applications on servlet container">

    <list url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"/>

  </target>

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare">
    <!-- Create build directories as needed -->
    <mkdir  dir="${dist.dir}"/>    
    <!-- Copy external dependencies as required -->
  </target>

<!--
  The "reload" target tells the specified Tomcat 4 installation to dynamically
  reload this web application, to reflect changes in the underlying classes or
  the "web.xml" deployment descriptor.
-->

  <target name="reload" description="Reload application on servlet container">
    <reload url="${manager.url}"
           username="${manager.username}"
           password="${manager.password}"
           path="${app.path}"/>
  </target>

<!--
  The "undeploy" target tells the specified Tomcat 4 installation to dynamically
  remove this web application from service.
  NOTE:  This is the logical opposite of the "install" target.
-->

  <target name="undeploy" description="Remove application on servlet container">
      <undeploy url="${manager.url}"
             username="${manager.username}"
             password="${manager.password}"
             path="${app.path}"/>
  </target>

  <target name="remove" description="Remove application on servlet container">
      <remove url="${manager.url}"
             username="${manager.username}"
             password="${manager.password}"
             path="${app.path}"/>
  </target>


</project>
