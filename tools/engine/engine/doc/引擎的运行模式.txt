
目前的引擎接口通过IEngine来表现
获取的方法是全局函数Nuclear::GetEngine
也就是用户只能创建一个引擎的实例

引擎有两种运行模式
1. 独立模式
   引擎不负责创建窗口和分发消息
   
2. 框架模式
   引擎创建和销毁游戏主窗口，实际也控制客户端生命期

运行模式的实现

1. 当前的实现方式是在IEngine的Run接口的参数中制定运行模式
   引擎的实现对象记录了模式参数，并在各个接口和引擎运行中通过分支判断来实现两种模式的不同流程

   独立模式:
       使用这调用Run, Exit接口开始运行和结束引擎，并需要调用OnWindowMessge和OnIdle接口来控制引擎
   目前用于场景编辑器

   框架模式:
       应用只需要调用Run接口，(Exit接口用于非正常退出)
   目前用于游戏客户端

   这种方式比较简单，满足现有需求，但代码结构不清晰，并不能有多个引擎实例

2. 也可以考虑分层实现，引擎内核只支持独立模式，这样内核可以有多个实例
   在外面套一个框架Wrapper，创建内核和窗口来实现框架模式
   对外同时暴露提供两套模式的不同接口，由编辑器和客户端自由调用所需的接口
   或者还是暴露一个参数化的接口，内部实现去分发
   这种方式比较灵活，但目前并没有需求驱动，而且降低了接口的易用性
   