
// GENERATE BY RPCGEN. DO NOT EDIT THIS FILE.

#include "rpcgen.hpp"
#include "protocols.hpp"

// include managers
#include "AuAnyClient.hpp"
#include "AuthClient.hpp"
#include "CrossClient.hpp"
#include "CrossServer.hpp"
#include "DeliverServer.hpp"
#include "GameDBServer.hpp"

// protocol stubs
static cross::AnnounceZoneidToCross cross_AnnounceZoneidToCross((void*)0);
static cross::AnnounceZoneidToCross_Re cross_AnnounceZoneidToCross_Re((void*)0);
static cross::BroadcastCrossStatus cross_BroadcastCrossStatus((void*)0);
static cross::BroadcastCrossStatus_Re cross_BroadcastCrossStatus_Re((void*)0);
static cross::BroadcastData cross_BroadcastData((void*)0);
static cross::CommonDataTransfer cross_CommonDataTransfer((void*)0);
static cross::SendUserInfoAndTicket cross_SendUserInfoAndTicket((void*)0);
static cross::SendUserInfoAndTicket_Re cross_SendUserInfoAndTicket_Re((void*)0);
static cross::UserDataTransfer cross_UserDataTransfer((void*)0);
static gnet::AU2Game gnet_AU2Game((void*)0);
static gnet::AddCash gnet_AddCash((void*)0);
static gnet::AddCash_Re gnet_AddCash_Re((void*)0);
static gnet::AddictionControl gnet_AddictionControl((void*)0);
static gnet::AddictionControlRep gnet_AddictionControlRep((void*)0);
static gnet::AnnounceForbidInfo gnet_AnnounceForbidInfo((void*)0);
static gnet::AnnounceServerAttribute gnet_AnnounceServerAttribute((void*)0);
static gnet::AnnounceZoneid2 gnet_AnnounceZoneid2((void*)0);
static gnet::AnnounceZoneid3 gnet_AnnounceZoneid3((void*)0);
static gnet::AuGameKeepAlive gnet_AuGameKeepAlive((void*)0);
static gnet::AuthdVersion gnet_AuthdVersion((void*)0);
static gnet::CertAnswer gnet_CertAnswer((void*)0);
static gnet::CertFinish gnet_CertFinish((void*)0);
static gnet::CertKey gnet_CertKey((void*)0);
static gnet::CertRequest gnet_CertRequest((void*)0);
static gnet::CertVerify gnet_CertVerify((void*)0);
static gnet::CouponExchange gnet_CouponExchange((void*)0, new gnet::CouponExchangeArg(), new gnet::CouponExchangeRes());
static gnet::CouponExchangeRep gnet_CouponExchangeRep((void*)0);
static gnet::CouponExchangeReq gnet_CouponExchangeReq((void*)0);
static gnet::DeliverAnnounceToLink gnet_DeliverAnnounceToLink((void*)0);
static gnet::DiscountAnnounce gnet_DiscountAnnounce((void*)0);
static gnet::ErrorInfoRep gnet_ErrorInfoRep((void*)0);
static gnet::ForceLoginRep gnet_ForceLoginRep((void*)0);
static gnet::ForceLoginReq gnet_ForceLoginReq((void*)0);
static gnet::GMKickoutUser gnet_GMKickoutUser((void*)0);
static gnet::GMKickoutUser_Re gnet_GMKickoutUser_Re((void*)0);
static gnet::GMShutup gnet_GMShutup((void*)0);
static gnet::GMShutup_Re gnet_GMShutup_Re((void*)0);
static gnet::Game2AU gnet_Game2AU((void*)0);
static gnet::GameDataTransferByAU gnet_GameDataTransferByAU((void*)0);
static gnet::GetAddCashSN gnet_GetAddCashSN((void*)0, new gnet::GetAddCashSNArg(), new gnet::GetAddCashSNRes());
static gnet::GetAddCashSN2 gnet_GetAddCashSN2((void*)0, new gnet::GetAddCashSN2Arg(), new gnet::GetAddCashSN2Res());
static gnet::GetAddCashSN2Rep gnet_GetAddCashSN2Rep((void*)0);
static gnet::GetAddCashSN2Req gnet_GetAddCashSN2Req((void*)0);
static gnet::GetAddCashSNRep gnet_GetAddCashSNRep((void*)0);
static gnet::GetAddCashSNReq gnet_GetAddCashSNReq((void*)0);
static gnet::GetMaxOnlineNum gnet_GetMaxOnlineNum((void*)0, new gnet::GetMaxOnlineNumArg(), new gnet::GetMaxOnlineNumRes());
static gnet::GetUserCoupon gnet_GetUserCoupon((void*)0, new gnet::GetUserCouponArg(), new gnet::GetUserCouponRes());
static gnet::GetUserCouponRep gnet_GetUserCouponRep((void*)0);
static gnet::GetUserCouponReq gnet_GetUserCouponReq((void*)0);
static gnet::GetUserNickName gnet_GetUserNickName((void*)0, new gnet::GetUserNickNameArg(), new gnet::GetUserNickNameRes());
static gnet::GetUserNickNameRep gnet_GetUserNickNameRep((void*)0);
static gnet::GetUserNickNameReq gnet_GetUserNickNameReq((void*)0);
static gnet::InstantAddCash gnet_InstantAddCash((void*)0, new gnet::InstantAddCashArg(), new gnet::InstantAddCashRes());
static gnet::InstantAddCashRep gnet_InstantAddCashRep((void*)0);
static gnet::InstantAddCashReq gnet_InstantAddCashReq((void*)0);
static gnet::KickoutUser gnet_KickoutUser((void*)0);
static gnet::MatrixFailure gnet_MatrixFailure((void*)0);
static gnet::MatrixPasswd gnet_MatrixPasswd((void*)0, new gnet::MatrixPasswdArg(), new gnet::MatrixPasswdRes());
static gnet::MatrixPasswd2 gnet_MatrixPasswd2((void*)0, new gnet::MatrixPasswd2Arg(), new gnet::MatrixPasswd2Res());
static gnet::MatrixPasswdRep gnet_MatrixPasswdRep((void*)0);
static gnet::MatrixPasswdReq gnet_MatrixPasswdReq((void*)0);
static gnet::MatrixResponseRep gnet_MatrixResponseRep((void*)0);
static gnet::MatrixResponseReq gnet_MatrixResponseReq((void*)0);
static gnet::NetBarAnnounce gnet_NetBarAnnounce((void*)0);
static gnet::OnlineAnnounce gnet_OnlineAnnounce((void*)0);
static gnet::PassportGetRoleList gnet_PassportGetRoleList((void*)0, new gnet::PassportGetRoleListArg(), new gnet::PassportGetRoleListRes());
static gnet::PassportGetRoleListRep gnet_PassportGetRoleListRep((void*)0);
static gnet::PassportGetRoleListReq gnet_PassportGetRoleListReq((void*)0);
static gnet::QueryUserForbid_Re gnet_QueryUserForbid_Re((void*)0);
static gnet::QueryUserPrivilege3 gnet_QueryUserPrivilege3((void*)0);
static gnet::QueryUserPrivilege3_Re gnet_QueryUserPrivilege3_Re((void*)0);
static gnet::QueryUserid2 gnet_QueryUserid2((void*)0, new gnet::QueryUserid2Arg(), new gnet::QueryUserid2Res());
static gnet::QueryUserid2Rep gnet_QueryUserid2Rep((void*)0);
static gnet::QueryUserid2Req gnet_QueryUserid2Req((void*)0);
static gnet::SSOGetTicketRep gnet_SSOGetTicketRep((void*)0);
static gnet::SSOGetTicketReq gnet_SSOGetTicketReq((void*)0);
static gnet::SetMaxOnlineNum gnet_SetMaxOnlineNum((void*)0, new gnet::SetMaxOnlineNumArg(), new gnet::SetMaxOnlineNumRes());
static gnet::SetServerAttr gnet_SetServerAttr((void*)0, new gnet::SetServerAttrArg(), new gnet::SetServerAttrRes());
static gnet::SetUserNickName gnet_SetUserNickName((void*)0, new gnet::SetUserNickNameArg(), new gnet::SetUserNickNameRes());
static gnet::SetUserNickNameRep gnet_SetUserNickNameRep((void*)0);
static gnet::SetUserNickNameReq gnet_SetUserNickNameReq((void*)0);
static gnet::StatusAnnounce gnet_StatusAnnounce((void*)0);
static gnet::SysSendMail2 gnet_SysSendMail2((void*)0);
static gnet::SysSendMail2_Re gnet_SysSendMail2_Re((void*)0);
static gnet::SysSendMail3 gnet_SysSendMail3((void*)0);
static gnet::SysSendMail3_Re gnet_SysSendMail3_Re((void*)0);
static gnet::SysSendMail4 gnet_SysSendMail4((void*)0);
static gnet::SysSendMail4_Re gnet_SysSendMail4_Re((void*)0);
static gnet::UserInfoRep gnet_UserInfoRep((void*)0);
static gnet::UserInfoReq gnet_UserInfoReq((void*)0);
static gnet::UserLogin gnet_UserLogin((void*)0, new gnet::UserLoginArg(), new gnet::UserLoginRes());
static gnet::UserLogin2 gnet_UserLogin2((void*)0, new gnet::UserLogin2Arg(), new gnet::UserLogin2Res());
static gnet::UserLoginRep gnet_UserLoginRep((void*)0);
static gnet::UserLoginReq gnet_UserLoginReq((void*)0);
static gnet::UserLogout gnet_UserLogout((void*)0, new gnet::UserLogoutArg(), new gnet::UserLogoutRes());
static gnet::VIPAnnounce gnet_VIPAnnounce((void*)0);
static gnet::VerifyMaster2 gnet_VerifyMaster2((void*)0);
static gnet::VerifyMaster2_Re gnet_VerifyMaster2_Re((void*)0);
static openau::AuAnyLogin openau_AuAnyLogin((void*)0, new openau::AuAnyLoginArg(), new openau::AuAnyLoginRes());
static openau::DataBetweenAuAnyAndClient openau_DataBetweenAuAnyAndClient((void*)0);
static openau::DataBetweenAuAnyAndGS openau_DataBetweenAuAnyAndGS((void*)0);
static openau::QueryOrderRequest openau_QueryOrderRequest((void*)0);
static openau::QueryOrderResponse openau_QueryOrderResponse((void*)0);
static openau::RegistGameServerRequest openau_RegistGameServerRequest((void*)0);
static openau::RegistGameServerResponse openau_RegistGameServerResponse((void*)0);
static openau::ServerIDResponse openau_ServerIDResponse((void*)0);

// state stubs
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _AuAnyClient[] = {
	gnet::AuGameKeepAlive::PROTOCOL_TYPE,
	openau::AuAnyLogin::PROTOCOL_TYPE,
	openau::DataBetweenAuAnyAndClient::PROTOCOL_TYPE,
	openau::DataBetweenAuAnyAndGS::PROTOCOL_TYPE,
	openau::QueryOrderResponse::PROTOCOL_TYPE,
	openau::RegistGameServerResponse::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State AuAnyClient(_AuAnyClient, sizeof(_AuAnyClient)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _AuthClient[] = {
	gnet::AU2Game::PROTOCOL_TYPE,
	gnet::AddCash::PROTOCOL_TYPE,
	gnet::AddictionControl::PROTOCOL_TYPE,
	gnet::AuGameKeepAlive::PROTOCOL_TYPE,
	gnet::AuthdVersion::PROTOCOL_TYPE,
	gnet::CertAnswer::PROTOCOL_TYPE,
	gnet::CertFinish::PROTOCOL_TYPE,
	gnet::CouponExchange::PROTOCOL_TYPE,
	gnet::DiscountAnnounce::PROTOCOL_TYPE,
	gnet::GameDataTransferByAU::PROTOCOL_TYPE,
	gnet::GetAddCashSN::PROTOCOL_TYPE,
	gnet::GetAddCashSN2::PROTOCOL_TYPE,
	gnet::GetUserCoupon::PROTOCOL_TYPE,
	gnet::GetUserNickName::PROTOCOL_TYPE,
	gnet::InstantAddCash::PROTOCOL_TYPE,
	gnet::KickoutUser::PROTOCOL_TYPE,
	gnet::MatrixPasswd::PROTOCOL_TYPE,
	gnet::MatrixPasswd2::PROTOCOL_TYPE,
	gnet::NetBarAnnounce::PROTOCOL_TYPE,
	gnet::PassportGetRoleList::PROTOCOL_TYPE,
	gnet::QueryUserForbid_Re::PROTOCOL_TYPE,
	gnet::QueryUserPrivilege3_Re::PROTOCOL_TYPE,
	gnet::QueryUserid2::PROTOCOL_TYPE,
	gnet::SSOGetTicketRep::PROTOCOL_TYPE,
	gnet::SetUserNickName::PROTOCOL_TYPE,
	gnet::SysSendMail2::PROTOCOL_TYPE,
	gnet::SysSendMail3::PROTOCOL_TYPE,
	gnet::SysSendMail4::PROTOCOL_TYPE,
	gnet::UserLogin::PROTOCOL_TYPE,
	gnet::UserLogin2::PROTOCOL_TYPE,
	gnet::UserLogout::PROTOCOL_TYPE,
	gnet::VIPAnnounce::PROTOCOL_TYPE,
	gnet::VerifyMaster2::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State AuthClient(_AuthClient, sizeof(_AuthClient)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _CrossClient[] = {
	cross::AnnounceZoneidToCross_Re::PROTOCOL_TYPE,
	cross::BroadcastCrossStatus::PROTOCOL_TYPE,
	cross::BroadcastData::PROTOCOL_TYPE,
	cross::CommonDataTransfer::PROTOCOL_TYPE,
	cross::SendUserInfoAndTicket::PROTOCOL_TYPE,
	cross::SendUserInfoAndTicket_Re::PROTOCOL_TYPE,
	cross::UserDataTransfer::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State CrossClient(_CrossClient, sizeof(_CrossClient)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _CrossServer[] = {
	cross::AnnounceZoneidToCross::PROTOCOL_TYPE,
	cross::BroadcastCrossStatus_Re::PROTOCOL_TYPE,
	cross::CommonDataTransfer::PROTOCOL_TYPE,
	cross::SendUserInfoAndTicket::PROTOCOL_TYPE,
	cross::SendUserInfoAndTicket_Re::PROTOCOL_TYPE,
	cross::UserDataTransfer::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State CrossServer(_CrossServer, sizeof(_CrossServer)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _DeliverImport[] = {
	gnet::AddictionControlRep::PROTOCOL_TYPE,
	gnet::AnnounceForbidInfo::PROTOCOL_TYPE,
	gnet::AnnounceServerAttribute::PROTOCOL_TYPE,
	gnet::AnnounceZoneid2::PROTOCOL_TYPE,
	gnet::AnnounceZoneid3::PROTOCOL_TYPE,
	gnet::CertKey::PROTOCOL_TYPE,
	gnet::CertRequest::PROTOCOL_TYPE,
	gnet::CertVerify::PROTOCOL_TYPE,
	gnet::CouponExchangeRep::PROTOCOL_TYPE,
	gnet::DeliverAnnounceToLink::PROTOCOL_TYPE,
	gnet::ErrorInfoRep::PROTOCOL_TYPE,
	gnet::ForceLoginReq::PROTOCOL_TYPE,
	gnet::GMKickoutUser_Re::PROTOCOL_TYPE,
	gnet::GMShutup_Re::PROTOCOL_TYPE,
	gnet::Game2AU::PROTOCOL_TYPE,
	gnet::GetAddCashSN2Req::PROTOCOL_TYPE,
	gnet::GetAddCashSNReq::PROTOCOL_TYPE,
	gnet::GetUserCouponRep::PROTOCOL_TYPE,
	gnet::GetUserNickNameRep::PROTOCOL_TYPE,
	gnet::InstantAddCashRep::PROTOCOL_TYPE,
	gnet::MatrixFailure::PROTOCOL_TYPE,
	gnet::MatrixPasswdRep::PROTOCOL_TYPE,
	gnet::MatrixResponseRep::PROTOCOL_TYPE,
	gnet::OnlineAnnounce::PROTOCOL_TYPE,
	gnet::PassportGetRoleListReq::PROTOCOL_TYPE,
	gnet::QueryUserid2Req::PROTOCOL_TYPE,
	gnet::SetUserNickNameRep::PROTOCOL_TYPE,
	gnet::UserInfoRep::PROTOCOL_TYPE,
	gnet::UserLoginRep::PROTOCOL_TYPE,
	openau::RegistGameServerRequest::PROTOCOL_TYPE,
	openau::ServerIDResponse::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State DeliverImport(_DeliverImport, sizeof(_DeliverImport)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _DeliverService[] = {
	gnet::CouponExchangeReq::PROTOCOL_TYPE,
	gnet::ForceLoginRep::PROTOCOL_TYPE,
	gnet::GetUserCouponReq::PROTOCOL_TYPE,
	gnet::InstantAddCashReq::PROTOCOL_TYPE,
	gnet::MatrixPasswdReq::PROTOCOL_TYPE,
	gnet::MatrixResponseReq::PROTOCOL_TYPE,
	gnet::SSOGetTicketReq::PROTOCOL_TYPE,
	gnet::StatusAnnounce::PROTOCOL_TYPE,
	gnet::UserLoginReq::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State DeliverService(_DeliverService, sizeof(_DeliverService)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _GameDBServer[] = {
	cross::BroadcastData::PROTOCOL_TYPE,
	cross::CommonDataTransfer::PROTOCOL_TYPE,
	cross::SendUserInfoAndTicket::PROTOCOL_TYPE,
	cross::SendUserInfoAndTicket_Re::PROTOCOL_TYPE,
	cross::UserDataTransfer::PROTOCOL_TYPE,
	gnet::AddCash_Re::PROTOCOL_TYPE,
	gnet::GMKickoutUser::PROTOCOL_TYPE,
	gnet::GMShutup::PROTOCOL_TYPE,
	gnet::Game2AU::PROTOCOL_TYPE,
	gnet::GameDataTransferByAU::PROTOCOL_TYPE,
	gnet::GetAddCashSN2Rep::PROTOCOL_TYPE,
	gnet::GetAddCashSNRep::PROTOCOL_TYPE,
	gnet::GetMaxOnlineNum::PROTOCOL_TYPE,
	gnet::GetUserNickNameReq::PROTOCOL_TYPE,
	gnet::PassportGetRoleListRep::PROTOCOL_TYPE,
	gnet::QueryUserPrivilege3::PROTOCOL_TYPE,
	gnet::QueryUserid2Rep::PROTOCOL_TYPE,
	gnet::SetMaxOnlineNum::PROTOCOL_TYPE,
	gnet::SetServerAttr::PROTOCOL_TYPE,
	gnet::SetUserNickNameReq::PROTOCOL_TYPE,
	gnet::SysSendMail2_Re::PROTOCOL_TYPE,
	gnet::SysSendMail3_Re::PROTOCOL_TYPE,
	gnet::SysSendMail4_Re::PROTOCOL_TYPE,
	gnet::UserInfoReq::PROTOCOL_TYPE,
	gnet::VerifyMaster2_Re::PROTOCOL_TYPE,
	openau::DataBetweenAuAnyAndGS::PROTOCOL_TYPE,
	openau::QueryOrderRequest::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State GameDBServer(_GameDBServer, sizeof(_GameDBServer)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _Null[] = {
	0,
};
GNET::Protocol::Manager::Session::State Null(_Null, (size_t)0, 5);

} 
} 

