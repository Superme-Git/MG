
// GENERATE BY RPCGEN. DO NOT EDIT THIS FILE.

#include "rpcgen.hpp"
#include "protocols.hpp"

// include managers
#include "DeliveryClient.hpp"
#include "LinkServer.hpp"
#include "ProviderServer.hpp"

// protocol stubs
static gnet::AddictionControl gnet_AddictionControl((void*)0);
static gnet::AddictionControlRep gnet_AddictionControlRep((void*)0);
static gnet::AnnounceForbidInfo gnet_AnnounceForbidInfo((void*)0);
static gnet::AnnounceServerAttribute gnet_AnnounceServerAttribute((void*)0);
static gnet::CertVerify gnet_CertVerify((void*)0);
static gnet::Challenge gnet_Challenge((void*)0);
static gnet::CouponExchangeRep gnet_CouponExchangeRep((void*)0);
static gnet::CouponExchangeReq gnet_CouponExchangeReq((void*)0);
static gnet::DeliverAnnounceToLink gnet_DeliverAnnounceToLink((void*)0);
static gnet::ErrorInfo gnet_ErrorInfo((void*)0);
static gnet::ErrorInfoRep gnet_ErrorInfoRep((void*)0);
static gnet::ForceLoginRep gnet_ForceLoginRep((void*)0);
static gnet::ForceLoginReq gnet_ForceLoginReq((void*)0);
static gnet::GetUserCouponRep gnet_GetUserCouponRep((void*)0);
static gnet::GetUserCouponReq gnet_GetUserCouponReq((void*)0);
static gnet::InstantAddCashRep gnet_InstantAddCashRep((void*)0);
static gnet::InstantAddCashReq gnet_InstantAddCashReq((void*)0);
static gnet::KeepAlive gnet_KeepAlive((void*)0);
static gnet::KeyExchange gnet_KeyExchange((void*)0);
static gnet::KickoutUser gnet_KickoutUser((void*)0);
static gnet::MatrixChallenge gnet_MatrixChallenge((void*)0);
static gnet::MatrixPasswdRep gnet_MatrixPasswdRep((void*)0);
static gnet::MatrixPasswdReq gnet_MatrixPasswdReq((void*)0);
static gnet::MatrixResponse gnet_MatrixResponse((void*)0);
static gnet::MatrixResponseRep gnet_MatrixResponseRep((void*)0);
static gnet::MatrixResponseReq gnet_MatrixResponseReq((void*)0);
static gnet::OnlineAnnounce gnet_OnlineAnnounce((void*)0);
static gnet::PortForward gnet_PortForward((void*)0);
static gnet::Response gnet_Response((void*)0);
static gnet::SSOGetTicketRep gnet_SSOGetTicketRep((void*)0);
static gnet::SSOGetTicketReq gnet_SSOGetTicketReq((void*)0);
static gnet::StatusAnnounce gnet_StatusAnnounce((void*)0);
static gnet::UserLoginRep gnet_UserLoginRep((void*)0);
static gnet::UserLoginReq gnet_UserLoginReq((void*)0);
static gnet::link::AnnounceLinkId gnet_link_AnnounceLinkId((void*)0);
static gnet::link::Bind gnet_link_Bind((void*)0);
static gnet::link::Broadcast gnet_link_Broadcast((void*)0);
static gnet::link::Dispatch gnet_link_Dispatch((void*)0);
static gnet::link::Kick gnet_link_Kick((void*)0);
static gnet::link::LinkBroken gnet_link_LinkBroken((void*)0);
static gnet::link::LinkServerControl gnet_link_LinkServerControl((void*)0);
static gnet::link::Send gnet_link_Send((void*)0);
static gnet::link::SetLogin gnet_link_SetLogin((void*)0);
static gnet::link::UnBind gnet_link_UnBind((void*)0);
static openau::DataBetweenAuAnyAndClient openau_DataBetweenAuAnyAndClient((void*)0);
static openau::ServerIDResponse openau_ServerIDResponse((void*)0);

// state stubs
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _DeliveryClient[] = {
	gnet::AddictionControlRep::PROTOCOL_TYPE,
	gnet::AnnounceForbidInfo::PROTOCOL_TYPE,
	gnet::AnnounceServerAttribute::PROTOCOL_TYPE,
	gnet::CertVerify::PROTOCOL_TYPE,
	gnet::CouponExchangeRep::PROTOCOL_TYPE,
	gnet::DeliverAnnounceToLink::PROTOCOL_TYPE,
	gnet::ErrorInfoRep::PROTOCOL_TYPE,
	gnet::ForceLoginReq::PROTOCOL_TYPE,
	gnet::GetUserCouponRep::PROTOCOL_TYPE,
	gnet::InstantAddCashRep::PROTOCOL_TYPE,
	gnet::KickoutUser::PROTOCOL_TYPE,
	gnet::MatrixPasswdRep::PROTOCOL_TYPE,
	gnet::MatrixResponseRep::PROTOCOL_TYPE,
	gnet::OnlineAnnounce::PROTOCOL_TYPE,
	gnet::SSOGetTicketRep::PROTOCOL_TYPE,
	gnet::UserLoginRep::PROTOCOL_TYPE,
	openau::DataBetweenAuAnyAndClient::PROTOCOL_TYPE,
	openau::ServerIDResponse::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State DeliveryClient(_DeliveryClient, sizeof(_DeliveryClient)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _Forward[] = {
	gnet::CouponExchangeReq::PROTOCOL_TYPE,
	gnet::ForceLoginRep::PROTOCOL_TYPE,
	gnet::GetUserCouponReq::PROTOCOL_TYPE,
	gnet::InstantAddCashReq::PROTOCOL_TYPE,
	gnet::KeepAlive::PROTOCOL_TYPE,
	gnet::PortForward::PROTOCOL_TYPE,
	gnet::SSOGetTicketReq::PROTOCOL_TYPE,
	openau::DataBetweenAuAnyAndClient::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State Forward(_Forward, sizeof(_Forward)/sizeof(GNET::Protocol::Type), 60);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _GResponseReceive[] = {
	0,
};
GNET::Protocol::Manager::Session::State GResponseReceive(_GResponseReceive, (size_t)0, 60);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _KeyExchgSend[] = {
	gnet::KeyExchange::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State KeyExchgSend(_KeyExchgSend, sizeof(_KeyExchgSend)/sizeof(GNET::Protocol::Type), 60);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _LinkImport[] = {
	gnet::AddictionControl::PROTOCOL_TYPE,
	gnet::Challenge::PROTOCOL_TYPE,
	gnet::ErrorInfo::PROTOCOL_TYPE,
	gnet::MatrixChallenge::PROTOCOL_TYPE,
	gnet::MatrixPasswdReq::PROTOCOL_TYPE,
	gnet::MatrixResponseReq::PROTOCOL_TYPE,
	gnet::StatusAnnounce::PROTOCOL_TYPE,
	gnet::UserLoginReq::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State LinkImport(_LinkImport, sizeof(_LinkImport)/sizeof(GNET::Protocol::Type), 0);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _LinkProvider[] = {
	gnet::link::AnnounceLinkId::PROTOCOL_TYPE,
	gnet::link::Bind::PROTOCOL_TYPE,
	gnet::link::Broadcast::PROTOCOL_TYPE,
	gnet::link::Dispatch::PROTOCOL_TYPE,
	gnet::link::Kick::PROTOCOL_TYPE,
	gnet::link::LinkBroken::PROTOCOL_TYPE,
	gnet::link::LinkServerControl::PROTOCOL_TYPE,
	gnet::link::Send::PROTOCOL_TYPE,
	gnet::link::SetLogin::PROTOCOL_TYPE,
	gnet::link::UnBind::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State LinkProvider(_LinkProvider, sizeof(_LinkProvider)/sizeof(GNET::Protocol::Type), -1);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _LinkService[] = {
	gnet::Response::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State LinkService(_LinkService, sizeof(_LinkService)/sizeof(GNET::Protocol::Type), 60);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _Null[] = {
	0,
};
GNET::Protocol::Manager::Session::State Null(_Null, (size_t)0, 5);

} 
} 
namespace gnet { 
namespace state { 
static GNET::Protocol::Type _VerifyMatrix[] = {
	gnet::MatrixResponse::PROTOCOL_TYPE,
};
GNET::Protocol::Manager::Session::State VerifyMatrix(_VerifyMatrix, sizeof(_VerifyMatrix)/sizeof(GNET::Protocol::Type), 60);

} 
} 

