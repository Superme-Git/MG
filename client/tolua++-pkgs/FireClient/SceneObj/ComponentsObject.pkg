enum eSpriteComponentType
{
	eSprite_Weapon= 1,
	eSprite_Headdress= 2,
	eSprite_Backdress= 3,
	eSprite_Facedress1= 4,
	eSprite_Facedress2= 5,
	eSprite_Horse= 6,
	eSprite_WeaponColor= 7,
	eSprite_Fashion= 8,
	eSprite_DyePartA = 50,
	eSprite_DyePartB = 51,
	eSprite_Effect = 60, // 套装特效
};

class ComponentInfoMap
{
};

class ComponentsObject : public SceneObject
{
public:
	ComponentsObject();
	virtual ~ComponentsObject();

	void UpdateSpriteComponent(const std::map<char,int>& components);//根据服务器发下来的换装map值刷新人物Components

	virtual void SetSpriteComponent(eSpriteComponentType type,int baseid,bool forcechange = false);
	int GetSpriteComponent(eSpriteComponentType type);
	
	void ResetSpriteComponent();					//还原所有配件（主要是摆摊时候用）
	void ClearSpriteComponent();					//删除所有配件（主要是摆摊时候用）
	
	void ClearShouXiSpriteComponent();				//清除所有配件，并且还原m_ComponentInfo，首席-弟子时用
	
	void AddEquipEffect(int effectId);
	
	void RemoveEquipEffect();

	void CheckEquipEffect(int color);

	const ComponentInfoMap& GetComponentInfo();

	virtual bool CanBeAttack();
	virtual bool CanBeGiven();
	virtual bool CanJoinTeam();
	virtual bool CanTradeWith();
	virtual bool CanGiveFlower();
	virtual bool CanGiveRose();
	virtual bool CanBeUseSkill(int skillid);
	virtual bool CanPickedUp();
	virtual bool CanBeVisited();
	virtual int CanBeTriggered();

	virtual bool CanFBAttack();
	virtual bool CanFBRepair();

	virtual bool PlayAction(eActionType actionType,float freq =g_defaultActionFrequence);
	
	virtual std::wstring GetActionName(eActionType type);

	virtual void ChangeSpriteModel(const int& modelid);//换造型

	void UpdateWeaponColorParticle(int weaponid);	//武器粒子效果

	bool m_IsMainCharacter;
};
