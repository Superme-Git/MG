

// 登陆类型
#define AUTH_TYPE_NORMAL 0
#define AUTH_TYPE_AUANY  1

// 连接方式
#define CONNECT_TYPE_NORMAL 0
#define CONNECT_TYPE_TGW    1


////游戏退出方式
enum eExitType
{
	eExitType_ToLogin = 0,		//退至游戏登录界面
	eExitType_ToSelectRole,		//退至角色选择色界面
	eExitType_ToWindows,		//关闭游戏
	eExitType_Max
};

enum eExitToLoginType
{	
    eExitToLoginType_Logout = 0,
	eExitToLoginType_LogoutIn,
	eExitToLoginType_ChangeLogin,
    eExitToLoginType_Special,
    eExitToLoginType_Max
};

enum eDisplayMode
{
	eDisplayMode_800600,
	eDisplayMode_1024768,
    eDisplayMode_1136640,
	eDisplayMode_1280800,
	eDisplayMode_12801024,
	eDisplayMode_1366768,
	eDisplayMode_1440900,
	eDisplayMode_16801050,
	eDisplayMode_19201080,
	eDisplayMode_Max
};

class GameApplication : public LuaTickerRegister
{
 public:
	enum eSoundType
	{
		eSoundType_SOUNDBACKGROUND		= 0,
		eSoundType_SOUNDEFFECT			= 1,
		eSoundType_BATTLESOUNDBG		= 2,
		eSoundType_BATTLESOUNDEFFECT	= 3,
		eSoundType_UISOUND             = 4,
		eSoundType_SPRITE3DEFFECT		= 5,
		eSoundType_MAGIC3DEFFECT		= 6,
	};

	enum eTitleInfoStep
	{
		eTitleInfoStep_GameName = 1,
		eTitleInfoStep_GameAndSeverName,
		eTitleInfoStep_GameAndSeverAndPlayerName,
	};

	GameApplication();
	~GameApplication();
	static GameApplication& GetInstance();

public:
	std::wstring GameName;

	int64_t m_iServerTime;//服务器时间

	Nuclear::IEngine* m_pEngine;
	Nuclear::IEnv*    m_pEnv;

	std::wstring m_AreaName;//服务器区的名称
	std::wstring m_ServerName;//服务器名称
	std::wstring m_ChargeBindHttpAdr;//充值绑定的地址
	std::wstring m_MainPageHttpAdr;//官方主页的地址

	CloseExecutorTimer*  m_pCloseExecutorTimer;

public:
	virtual void InitIni();
    virtual bool OnInit(int step);
    virtual bool OnExit();

	static std::wstring GetVersionOldCaption();
	static unsigned int GetVersionOld();
    
	static std::wstring GetVersionCaption();
	static unsigned int GetVersion();

	static std::wstring GetVersionBaseCaption();
	static unsigned int GetVersionBase();

	static std::wstring GetChannelCaption();
	static unsigned int GetChannel();

	static std::wstring GetExtendValua(std::wstring wsKey);
	static bool GetLoadFromPak();
	static bool GetVersionDonotCheck();
    
	virtual void OnReloadAllTexture();
	void applicationDidEnterBackground();
	void applicationEnterForeground();
    
	Game::NetConnection* GetGameNetConnection();
    
    void DestroyGameNetConnection();
    
	void SetAreaServerInfo(const std::wstring& area, const std::wstring& server);
	std::wstring GetSeverNameInfo();
	const std::wstring& GetAreaName();
	const std::wstring& GetServerName();
	const std::wstring& GetChargeBindHttpAdr();
	const std::wstring& GetMainPageHttpAdr();
	const char* GetVoiceServerAddress();
	const char* GetPlatformChannelID();
	void AddTask(Nuclear::ExecThread::CallbackTask* pTask);
	void CloseExecutor();

	bool IsShowFPS();
	bool IsShowUIState();
	bool IsShowmPerformance();

	int64_t GetEnterWorldRoleID();
	void SetEnterWorldRoleID(int64_t roleid);

	bool GetWaitToEnterWorld();
	void SetWaitToEnterWorld(bool flag);

	bool GetXmlBeanReady();
	void SetXmlBeanReady(bool flag);

	const char* getCacheLayoutConfig();
	void OnXmlBeanReady();
	void LoadBeanAsync();
	void AddAsyncLoadBeanTask();

	virtual void ExitGame(eExitType eType, int relogin = eExitToLoginType_ChangeLogin);
	virtual void StartGame();
	virtual void FinishLogin();
	virtual void CreateConnection(
		const char* account, 
		const char* key, 
		const std::wstring& host, 
		const std::wstring& sever, 
		bool bforcelogin, 
		const std::wstring &serverName, 
		const std::wstring &areaName, 
		const int serverid = 0, 
		const char* channelId = "",
		int type = AUTH_TYPE_AUANY, 
		const std::string& account_suffix = "",
		int ct_type = CONNECT_TYPE_NORMAL,
		const std::string& gip = "", 
		const std::string& gport = ""
		);
	virtual void StartLogin();
	virtual void CreateCrossConnection(const char* account, const char* key, const std::wstring& host, const std::wstring& sever);
	void DestroyConnection();

	virtual void OnTick(unsigned int now, unsigned int delta, unsigned int realDelta);
	virtual void OnRenderUI(int now, bool realRender);
	virtual bool OnBeforeRender(int now);

	virtual void OnRenderInit(int now, int step, int totalstep);

	// 加载地图的回调
	virtual bool LoadingMapNotify(int pro);

	virtual void OnUpdateSpriteAction(Nuclear::ISprite * sprite, Nuclear::XPUSA_TYPE type);

	Nuclear::NuclearLocation gGetCursorPosition();

	//设置游戏时辰和当前服务器的时间
	int GetTime();
	void SetTime(const int64_t& servertime);

	bool IsZerosHours();//是否是零点
	void OnWeeHours();//零点时，客户端做的一些处理

	//从进入游戏到现在的时间
	DWORD GetOnLineTime();

	int GetLoginWindowWidth(); //获得登陆得的窗口大小，不是1024*768就是800*600

	eDisplayMode GetEnterWorldWindowMode();

	//是否全屏 
	Nuclear::NuclearScreenMode GetIsWindow();

	//垂直同步
	int GetRenderFlag();

	Nuclear::NuclearMultiSampleType GetAntialiaseLevel(int& level); //获得抗锯齿的级别
	bool isSpriteUseMipmap(); //精灵贴图是否用mipmap
	
	// ycl SDK 初始化，或者显示快速登录界面
	void doSDKOrShowQuickLogin();
	void playLoginBGM();  // ycl 播放登录背景音乐

	void InitDisplayMode();//进入游戏后，初始化分辨率

	eDisplayMode	gGetDisPlayMode();

	BOOL SetGameMainWindowTitle(const UINT& StepInfo, const std::wstring& AddInfo = L"");
	BOOL SetGameMainWindowTitle(const std::wstring& TitleName);
	BOOL SetGameMainWindowTitle(LPCWSTR TitleName);

	//进入游戏load游戏图
	void DrawLoginBar(float pro);
	void BeginDrawServantIntro();
	void EndDrawServantIntro();
  
	void SetWaitForEnterWorldState(bool bWait);

	bool isShowProgressBar();

	bool IsInLittleGame();

	void setCollectFrequency(unsigned int frequency);

	void InitSpecialEffectList();

	//自适应同屏人数相关
	void OnFpsGatherTimer(int delta);
	int GetScreenMaxRoleByIniFile(); //从ini中获得玩家设置的同屏人数的类别
	int GetScreenNumByFps(int fps);  //根据fps获得同屏人数
	void BeginGatherFpsInf();
	void EndGatherFpsInf();
	void BeginAdjustScreenRoleNum();
	void EndAdjustScreenRoleNum();

	void SetScreenMaxRoleType(int type);
	int GetCurScreenMaxRoleType();
	void OnGameStartAdjustScreenRolNum(); //进入游戏时开始根据ini文件的配置开启自适应帧率
	void EnableAutoAdjustScreenNum(bool bEnable);

	void EnableAutoHideModel(bool bHide);
	bool isAutoHideModel();
	
	void setShowFps(bool isShow);

	int GetCurShowMaxRoleNum();
	void SetMaxShowRoleNum(int num);

	void SetGACDTips(const std::wstring& tips);
	std::wstring GetGACDTips();
	bool isLuaDebugPrint();

	//进入战斗录像观看观看模式
	void EnterBattleDemo();
	//退出游戏战斗录像观看模式
	void ExitBattleDemo();

	//进入战斗动画编辑模式
	void EnterBattleAnimEdit();
	//退出游戏动画编辑模式
	void ExitBattleAnimEdit();

	//进入资源检查模式
	void EnterResourceCheck();
	//退出资源检查模式
	void ExitResourceCheck();

	void AddToHWndList(const HWND& hWnd);

	bool isFirstEnterGame();
	void SetFirstEnterGame(bool b);
	int isFirstTimeEnterGame(); //0新建账号第一次进入游戏， 1 进入新手剧情 ， 2 进入新手战斗， 3 新手战斗后剧情 ， 10 新手剧情新手战斗over
	void setFirstTimeEnterGameValue(int flag);

	std::wstring GetDisplayDesc(int w,int h);
	const std::vector<stDisplayModeInf>&  GetAllDisplayInf();
	void GetDisplayInf(eDisplayMode mode, stDisplayModeInf& inf);

	void InitFont();
	void EnableHotApplySysSetting();
	bool isHotApplySysSetting();

	//性能测试相关
	void CollectingGCMemory();

	void BeginShake(int shakeID);		//开始震屏
	void ShakeRun(int now,int delta);	//震屏run

	void ToggleDrawUI();
	void ToggleShowName();

	bool GetShieldAllAppFunc();
	void SetShieldAllAppFunc(bool flag);

	void setDisconnect(bool b);
	void setTimeoutCount(int count);
	int getTimeoutCount();
	void setReconnecting(bool b);
	bool isReconnecting();

	void setDetachingIME(bool b);

	std::wstring getCaptureDir();
	
	//是否是标准版本（true:标准版本,false:低清版本）
	bool IsNormalVer();

	// 分享到社交平台
	void shareToPlatform(eShareSDK eShareSDK_, eShareType eShareType_, const char* title, const char* text, const char* imgPath, const char* webUrl);
	//显示MQview
	void showMQView();
	
	bool GetRecordEnable();
    
  void StartRecordForIOS();
  void StopRecordForIOS();
  int GetRecordState();
	//调用ChartBoostSdk的统计
	void gCallChartBoost();
	//IOS应用评论
	void CallEvaluate();
	
	//启动外挂分析器
	void gStartWGAnalysis();
	std::string GetIniFileName();
};

bool gRunGameApplication();
Game::NetConnection* gGetNetConnection();
void gDestroyNetConnection();
extern int64_t gGetServerTime();
extern void gSetMaxFps(int maxFps);
extern void gGetTimeDetailsCPP(const int64_t seconds, int64_t &days, int &hours, int &mins, int &secs);
void gSetBackgroundMode(bool bBackgroundMode);
bool gIsInBackground();
void gRefuseAppBrightness(bool bBackgroundMode);
void gSetReloadAllTexturesState(bool flag);
bool gGetReloadAllTexturesState();
std::string gGetChannelName();

GameApplication* gGetGameApplication();
eDisplayMode gGetDisPlayMode();

void gGCNow(int level);
void gReceiveMemoryWarning();
void gSetGCCooldown(int time);

long gGetNumberValueByStrKey(const char *key); //get number value from lua. by lg

extern int64_t GetTableNumberFromLua(const char* tableName, int tableId, const char* key);

extern float GetTableFloatFromLua(const char* tableName, int tableId, const char* key);

extern std::string GetTableStringFromLua(const char* tableName, int tableId, const char* key);

extern std::wstring GetTableWStringFromLua(const char* tableName, int tableId, const char* key);
